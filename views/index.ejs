<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Arduino Monitor</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const updateTable = (data) => {
        const tableBody = document.getElementById('statesTableBody');
        tableBody.innerHTML = '';
        data.forEach(row => {
          const tr = document.createElement('tr');
          tr.innerHTML = `
            <td>${row.mac}</td>
            <td>${row.readyState}</td>
            <td>${new Date(row.connectionTimestamp).toLocaleString()}</td>
          `;
          tableBody.appendChild(tr);
        });
      };

      const updateSensorsTable = (data) => {
        const tableBody = document.getElementById('sensorsTableBody');
        tableBody.innerHTML = '';
        data.forEach(sensor => {
          const tr = document.createElement('tr');
          tr.innerHTML = `
            <td>${sensor.id}</td>
            <td>${sensor.module_mac_address}</td>
            <td>${sensor.type}</td>
          `;
          tableBody.appendChild(tr);
        });
      };

      const fetchData = async () => {
        try {
          const response = await fetch('/api/fetchConnections');
          const data = await response.json();
          updateTable(data);
        } catch (error) {
          console.error('Error fetching data:', error);
        }
      };

      const fetchSensorsData = async () => {
        try {
          const response = await fetch('/api/fetchSensors');
          const data = await response.json();
          updateSensorsTable(data);
        } catch (error) {
          console.error('Error fetching sensors data:', error);
        }
      };

      const ctx = document.getElementById('sensorChart').getContext('2d');
      const sensorChart = new Chart(ctx, {
        type: 'line',
        data: {
          labels: [], // Timestamps
          datasets: [] // Sensor datasets
        },
        options: {
          responsive: true,
          scales: {
            x: {
              type: 'time',
              time: {
                unit: 'second'
              },
              title: {
                display: true,
                text: 'Time'
              }
            },
            y: {
              title: {
                display: true,
                text: 'Value'
              }
            }
          }
        }
      });

      const fetchSensorReadings = async () => {
        try {
          const response = await fetch('/api/fetchSensorReadings');
          const data = await response.json();
          
          // Group by sensor_id
          const groupedData = data.reduce((acc, reading) => {
            if (!acc[reading.sensor_id]) {
              acc[reading.sensor_id] = [];
            }
            acc[reading.sensor_id].push({
              x: new Date(reading.createdAt),
              y: reading.value
            });
            return acc;
          }, {});

          // Update chart data
          sensorChart.data.labels = data.map(reading => new Date(reading.createdAt));
          sensorChart.data.datasets = Object.keys(groupedData).map(sensor_id => ({
            label: `Sensor ${sensor_id}`,
            data: groupedData[sensor_id],
            fill: false,
            borderColor: getRandomColor()
          }));

          sensorChart.update();
        } catch (error) {
          console.error('Error fetching sensor readings:', error);
        }
      };

      const getRandomColor = () => {
        const letters = '0123456789ABCDEF';
        let color = '#';
        for (let i = 0; i < 6; i++) {
          color += letters[Math.floor(Math.random() * 16)];
        }
        return color;
      };

      // Fetch data initially and then every second
      fetchData();
      fetchSensorsData();
      fetchSensorReadings();
      setInterval(fetchData, 1000);
      setInterval(fetchSensorsData, 1000);
      setInterval(fetchSensorReadings, 1000);
    });
  </script>
</head>
<body>
  <h1>Arduino Monitor wowww</h1>
  <h2>Arduino Connections</h2>
  <table border="1">
    <thead>
      <tr>
        <th>Arduino Mac address</th>
        <th>Ready state</th>
        <th>Timestamp created</th>
      </tr>
    </thead>
    <tbody id="statesTableBody">
      <!-- Data will be injected here by JavaScript -->
    </tbody>
  </table>

  <h2>Sensors</h2>
  <table border="1">
    <thead>
      <tr>
        <th>ID</th>
        <th>Module mac address</th>
        <th>Type</th>
      </tr>
    </thead>
    <tbody id="sensorsTableBody">
      <!-- Data will be injected here by JavaScript -->
    </tbody>
  </table>

  <h2>Sensor Readings</h2>
  <canvas id="sensorChart" width="400" height="200"></canvas>
</body>
</html>
